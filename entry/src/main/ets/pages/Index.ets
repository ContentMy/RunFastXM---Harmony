// import { common } from '@kit.AbilityKit';
// import { mediaquery, promptAction, router } from '@kit.ArkUI';
import mediaquery from '@ohos.mediaquery'
import router from '@ohos.router';
// import promptAction from
import { TabBarItems } from '../common/contants'
import { CommonConstants } from '../common/contants/CommonConstants'
import { TabBarModel } from '../models/TabBarModel'
import { themeManager } from '../common/utils/themeManager'
import { MemorandumComp } from '../views/MemorandumComp'
import { RemindComp } from '../views/RemindComp'
import { TargetComp } from '../views/TargetComp'
import { UserComp } from '../views/UserComp'

@Entry//表示该组件为入口组件，在单个UI页面中，最多可以使用@Entry装饰一个自定义组件，只有@Entry装饰的组件才可以调用页面的生命周期
@Component//表示自定义组件，@Component装饰器仅能装饰struct关键字声明的数据结构。struct被@Component装饰后具备组件化的能力，需要实现build方法描述UI，一个struct只能被一个@Component装饰
struct Index {//
  //表示组件中的状态变量，这个变量变化会触发UI刷新
  // @State message: string = 'Hello World'
  @StorageProp('bottomHeight')
  bottomHeight: number = 0

  listenerScreen = mediaquery.matchMediaSync('(orientation: landscape) and (device-type: tablet)')

  @State
  isLandscape: boolean = false
  aboutToAppear(): void {//根据api返回屏幕是否为横向
    this.handleCardRouter()
    this.listenerScreen.on('change', (mediaQueryResult) => {
      this.isLandscape = mediaQueryResult.matches
    })
  }

  handleCardRouter() {
    // const routerOptions = AppStorage.Get<router.RouterOptions>('routerOptions')
    // AppStorage.Delete('routerOptions')
    // if (routerOptions?.url === 'pages/Index') {
    //   this.activeIndex = routerOptions.params?.['activeIndex']
    // } else if (routerOptions?.url === 'pages/ClockedPage') {
    //   router.pushUrl(routerOptions)
    // }
  }

  @Builder
  TabBarBuilder(item: TabBarModel, index: number) {//用于设置底部导航栏的样式
    Column({ space: CommonConstants.SPACE_SM }) {
      Image(this.activeIndex === index ? item.activeIcon : item.defaultIcon)
        .width($r('app.float.tab_bar_item_icon_size'))
      Text(item.label)
        .fontSize($r('app.float.tab_bar_item_font_size'))
        .fontColor(this.activeIndex === index ? $r('app.color.colorGreen') : $r('app.color.colorBlack'))
        .animation({ duration: 300 })
    }
  }

  @State
  @Watch('onChangeIndex')
  activeIndex: number = 0
  onChangeIndex() {
    if (this.activeIndex === 3) {
      themeManager.settingStatusBarWhite()
    } else {
      themeManager.settingStatusBarBlack()
    }
  }
  /**
   * In low-code mode, do not add anything to the build function, as it will be
   * overwritten by the content generated by the .visual file in the build phase.
   */
  build() {//这里是用来写声明式UI的，如果使用了低代码模式，在page相关的build回调中就不需要进行代码的编写了，上述的注释也说明了这一点
    //以下是UI描述，也就是声明式UI的代码
    // Row() {//这里是系统组件，沿水平方向布局的容器组件
    //   Column() {//这里也是系统组件，沿垂直方向布局的容器组件
    //     Text(this.message)//这里也是系统组件，文本组件
    //       .fontSize(50)
    //       .fontWeight(FontWeight.Bold)
    //       Button('Click Me')
    //         .onClick(()=>{//这里是事件方法
    //           this.message = 'Click Change Hello Word'
    //         })
    //   }
    //   .width('100%')//这里是属性方法
    // }
    // .height('100%')

    Tabs({
      index: this.activeIndex
    }) {
      ForEach(TabBarItems, (item: TabBarModel, index: number) => {//遍历数据填充底部导航栏
        TabContent() {//内容展示，根据index不同来展示不同的页面
          if (index === 0) {
            RemindComp()
          } else if (index === 1) {
            TargetComp()
          } else if (index === 2) {
            MemorandumComp()
          } else {
            UserComp()
          }
        }
        .tabBar(this.TabBarBuilder(item, index))//设置样式
        // .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
      })
    }
    // .divider({ strokeWidth: $r('app.float.common_border_width'), color: $r('app.color.colorGray') })
    .vertical(this.isLandscape)//表示tabContent与tabs的排列位置，true为左右排列，false为上下排列
    .barPosition(this.isLandscape ? BarPosition.Start : BarPosition.End)//表示bar的位置，上下排列的话，BarPosition.Start为顶部，BarPosition.End为底部，如果左右排列则为前后
    // .onTabBarClick((index) => {
    //   this.activeIndex = index
    // })
    .onChange((index) => {//当tab的index更新时，同步页面的index，以满足页面的同步更新
      this.activeIndex = index
    })
    .barHeight(this.isLandscape ? $r('app.float.tab_bar_item_height_lg') : $r('app.float.tab_bar_item_height_sm'))//设置tabs的高度
    .scrollable(false)
    .margin({ bottom: this.bottomHeight })
  }
}